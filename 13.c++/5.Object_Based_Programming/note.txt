[ 类和对象 ]

面向对象程序设计方法的概述

对于规模较小的程序，可以直接编写出一个面向程序的过程，详细地描述每一瞬时地数据结构对其的操作过程。但是当程序规模较大时，就显得力不从心了。面向对象的编程思维就是为了解决编写大程序过程中的困难而产生的。

（（
那么什么是面向对象程序设计，面向对象的程序设计的思路和人们日常生活中处理问题的思路是相似的。在自然生活中，一个复杂的事物总是由许多部分组成。比如一辆汽车是由发送机、底盘、车身和轮子等部件组成的；一套房是由客厅、卧室、厨房和卫生间组成的。
当我们去生产一台汽车的时候，并不是一定要分先后次序，先发动机后地盘再车身和轮子，而是分别设计各个部件最后组装在一起，组装时各部分要有一定的联系以便协调工作。这就是面向对象程序设计的基本思路。
））

为了进一步了解面向对象设计，先了解几个[ 面向对象程序设计 ]的术语

======== 对象 ========
客观世界中任何一个事物都可以看成一个对象(object)，或者说客观世界是由千千万万个对象组成的。对象可大可小，例如：学校是一个对象，一个班级也是一个对象，一个学生也是一个对象；又比如游戏中的一个模式、一个英雄都是对象。

[对象]是构成系统的基本单位
想象一下，一个班级作为一个对象时有两个要素：一是班级的静态特征，如班级所属的院系和专业、学生人数、所在的教师等，这种静态特征称为"属性"；二是班级的动态特征，如学习、开会、比赛等，这种动态特征称为"行为"。如果想控制班级的活动，可以向其发送一个信息，例如听到上课铃就上课，听到下课铃就下课，这个信息一般称为"消息"。

任何一个对象都应当具有这两个要素，即"属性(attribute)"和"行为(behavior)"，它能根据外界给的信息进行相应的操作。一个对象往往是由一组属性和一组行为构成的。例如：一台摄影机是一个对象，它的"属性"就是生产厂家、牌子、重量、颜色、价位等，它的"行为"是其功能，即录像、暂停、播放、快进、倒退、停止等操作。一般来说凡是具备属性和行为这两种要素的都可以作为对象。

（（
一个数，是一个对象，因为它有值，能对它进行各种算数运算和输入输出；
一个字符串也是对象，它有长度、字符种类等属性，可以对其进行插入、比较、拼接等操作。
））

在一个系统中的多个对象之间通过一定的渠道相互联系，要使某一个对象实现某一种行为(操作)，应当向它传送相应的消息。例如想让录像机开始播放，必须去按按键或用遥控器发信号。对象之间就是这样通过发送和接收消息相互联系的。

使用面向对象的程序设计方法设计一个复杂的软件系统时，首要的问题是确定该系统是由哪些对象组成的，并设计这些对象。在C++中，每个对象都是由"数据"和"函数"这两部分组成的。
例如一个三角形是对象，它的三个边的边长就是其属性，"函数"是用来对数据进行操作的，以便实现某些功能，例如可以通过边长计算出三角形的周长和面积，并且将数据输出。这个计算和输出的动作就是"行为"，在程序设计方法中也称之为"方法(method)"。调用对象中的函数就是向该对象传送一个消息，要求该对象实现某一行为(功能)。
======================

======== 封装 ========
面向对象程序设计方法的一个重要特点就是"封装性(encapsulation)"，所谓"封装"，指两方面的含义：一是有关的数据和操作代码封装在一个对象中，形成一个基本单位，各个对象之间相对独立，互不干扰。二是将对象中某些部分对外隐蔽，即隐蔽其内部细节，指留下少量接口，以便与外界联系，接收外界的消息。这种对外界隐蔽的做法称为信息隐蔽，信息隐蔽有利于数据安全，防止无关的任了解和修改数据。
（（
概括的讲："封装"是指对一个对象进行封装处理，把它的一部分属性和方法能对外界屏蔽
即从外界是看不到的，甚至是不可知的。
在设计一个对象时，要周密地考虑如何进行封装，把不必要让外界知道的部分"隐蔽"起来。也就是说，把对象的内部实现 和 外部行为分隔开。人们在外部进行控制，而具体的操作细节是在内部完成的，对外界是不透明的。
））


对象中的函数名，就是对象的对外接口，外界可以通过函数名来调用这些函数来实现某些行为。
======================

======== 抽象 ========
抽象的作用是表示统一类事物的本质。对象是具体存在的，"类(class)"是抽象的。例如一个三角形可以作为一个对象，很多不同尺寸的三角形是很多不同的对象，但它们都拥有相同的属性和行为，于是我们就可以将他们抽象为一种类型，称为"三角形类型"。在C++中，这种类型称为"类"。

类是对象的抽象，对象是类的具体表现形式。
======================

===== 继承和重用 =====
如果汽车制造厂想生产一款新型汽车，一般是不会全部从头开始设计的，而是选择已有的某一型号汽车为基础，再增加一些新的功能，就研制成了新型号的汽车。这是提高生产效率的常用方法。

如果在软件开发中已经建立了一个名为A的"类"，又想另外建立一个名为B的"类"，而后者与前者内容基本相同.只是在前者的基础上增加一些属性和行为，显然不必再从头设计一个新类，而只需在类A的基础上增加一些新内容即可。这就是面向对象程序设计中的继承机制。利用继承可以简化程序设计的步骤。

举个例子：如果大家都已经充分认识了马的特征，现在要叙述"白马"的特征，显然不必从头介绍什么是马，而只要说明"白马是白色的马"即可。这就简化了人们对事物的认识和叙述，简化了工作程序。"白马"继承了"马"的基本特征，又增加了新的特征（颜色），"马"是父类，或称为基类，"白马"是从"马"派生出来的，称为子类或派生类。如果还想定义"白公马"，只需说明"白公马是雄性的白马"。"白公马"又是"白马"的子类或派生类。

C++提供了继承机制，采用继承的方法可以很方便地利用一个已有的类建立一个新的类，这就可以重用已有软件中的一部分甚至大部分，大大节省了编程工作量。这就是常说的“软件重用”（software reusability）的思想，不仅可以利用自己过去所建立的类，而且可以利用别人使用的类或存放在类库中的类，对这些类作适当加工即可使用，大大缩短了软件开发周期，对于大型软件的开发具有重要意义。
======================

======== 多态 ========
如果有几个相似而不完全相同的对象，有时人们要求在向它们发出同一个消息时，它们的反应各不相同，分别执行不同的操作。这种情况就是多态现象。例如甲、乙、丙3个班都是高二年级，他们有基本相同的属性和行为，在同时听到上课铃声时，他们会分别走进3个教室，而不会走向同一个教室。同样，如果有两支军队，当在战场上同时听到一种号声，由于事先约定不同，A军队可能实施进攻，而B军队可能准备开饭。
（（
又如，在Windows环境下，用鼠标双击一个文件对象（这就是向对象传送一个消息），如果对象是一个可执行文件，则会执行此程序，如果对象是一个文本文件，则启动文本编辑器并打开该文件。类似这样的情况是很多的。
））

在C++中，所谓多态性（polymorphism）是指∶由继承而产生的相关的不同的类，其对象对同一消息会作出不同的响应。多态性是面向对象程序设计的-一个重要特征，能增加程序的灵活性。
======================

[ 面向对象程序设计的特点 ]
传统的面向过程程序设计是围绕功能进行的，用一个函数实现一个功能。所有的数据都是公用的，一个函数可以使用任何一组数据，而一组数据又能被多个函数所使用。
程序设计者必须考虑每一个细节，什么时候对什么数据进行操作。当程序规模较大、数据很多、操作种类繁多时，程序设计者往往感到难以应付。

面向对象程序设计采取的是另外一种思路，它面对的是一个个对象。实际上，每一组数据都是有特定的用途的，是某种操作的对象。也就是说，一组操作调用一组数据。例如a、b、c是三角形的三边，只与计算三角形面积和输出三角形的操作有关，与其他操作无关。我们就把这3个数据和对三角形的操作代码放在一起，封装成一个对象，与外界相对分隔。

（（
程序设计者的任务包括两个方面∶一是设计所需的各种类和对象，即决定把哪些数据和操作封装在一起；二是考虑怎样向有关对象发送消息，以完成所需的任务。这时他如同一个总调度，不断地向各个对象发出命令，让这些对象活动起来（或者说激活这些对象），完成自己职责范围内的工作。各个对象的操作完成了，整体任务也就完成了。显然，对一个大型任务来说，面向对象程序设计方法是十分有效的，它能大大降低程序设计人员的工作难度，减少出错机会。
））

面向对象的软件工程主要包括以下几个部分
1、面向对象分析（object oriented analysis，OOA）
2、面向对象设计（object oriented design，OOD）
3、面向对象编程（object oriented programming，OOP）
4、面向对象测试（object oriented test，OOT）
5、面向对象维护（object oriented soft maintenance，OOSM）