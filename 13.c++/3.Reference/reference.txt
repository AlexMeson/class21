C++ [ 引用 (reference) ]

对一个数据可以使用"引用"（reference），这是C++对C的一个重要扩充，引用是一种新的变量类型，它的作用是为一个变量起一个别名。

假如有一个变量a，想给它起一个别名b，可以这样写:
1    int a = 2022;
2    int &b = a;     //b是a的引用(即b是a的别名)
可以进行如下的使用
3    cout << b << endl;
4    cout << "Please input an integar:";
5    cin >> b;
6    cout << "a = " << a << endl;

1、2行语句声明了b是a的引用，即b是a的别名。
经过这样的声明，a或b的作用相同，都代表统一变量。

注意：在这样的声明中，&是"引用声明符"，并不代表地址，
不要理解为"把a的值赋值给b的地址"。
声明变量b为引用类型，并不需要另外开辟内存单元来存放b的值。b和a占内存中的同一个存储单元，他们具有统一的地址。可以通过代码测试：
#include <iomanip>
cout << "&a = " << setbase(16) << &a << endl;
cout << "&b = " << setbase(16) << &b << endl;

在声明一个引用类型变量时，必须同时使之初始化，即声明它代表哪一个变量。在声明变量b时变量a的引用后，在它们所在函数执行期间，该引用类型变量b始终与其代表的变量a相联系，不能再作为其他变量的引用(别用)，意思是"企图使b又变成其他变量的引用是不行的"。

[ 引用作为函数参数 ]
C++之所以增加引用类型，主要是把它作为函数参数，以扩充函数传递数据的功能。

例：
#include <iostream>
#include <string>
#include <iomanip>

using namespace std;

/* 函数声明 */
void swap(int &x,int &y);

/* 主函数 */
int main(){

    int a = 2022;
    int b = 3000;

    cout << "a = " << a << "\tb = " << b << endl;
    swap(a,b);
    cout << "a = " << a << "\tb = " << b << endl;

    return 0;
}

void swap(int &x,int &y){
    int tmp;
    tmp = x,x = y,y = tmp;
}

调用时，实参a的名字传给了形参x(引用变量)，这样x就成了a的别称，
a和x代表同一个变量。
实际上是把实参a的地址传递到形参x，使形参x的地址取实参a的地址，
从而使x和a共享同一块内存单元。
可以发现这种行为不必在swap函数中声明形参使指针变量。指针变量要另外开辟内存单元，其内容是地址，而引用变量不是一个独立的变量，不单独占内存单元，例中的实参和形参数据类型相同，都是整型，且调用函数是不必用变量的地址，而是用变量名。这种传递方式比使用指针比变量简单、直观、方便。使用变量的引用，可以代替部分指针的操作。
引用不仅可以用于变量，也可以用于对象。
